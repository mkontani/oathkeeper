# ORY Oathkeeper Configuration
#
#
# !!WARNING!!
# This configuration file is for documentation purposes only. Do not use it in production. As all configuration items
# are enabled, it will not work out of the box either.
#
#
# ORY Oathkeeper can be configured using a configuration file and passing the file location using `-c path/to/config.yaml`.
# Per default, ORY Oathkeeper will look up and load file ~/.oathkeeper.yaml. All configuration keys can be set using environment
# variables as well.
#
# Setting environment variables is easy:
#
## Linux / OSX
#
# $ export MY_ENV_VAR=foo
# $ oathkeeper ...
#
# alternatively:
#
# $ MY_ENV_VAR=foo oathkeeper ...
#
## Windows
#
### Command Prompt
#
# > set MY_ENV_VAR=foo
# > oathkeeper ...
#
### Powershell
#
# > $env:MY_ENV_VAR="foo"
# > oathkeeper ...
#
## Docker
#
# $ docker run -e MY_ENV_VAR=foo oryd/oathkeeper:...
#
#
# Assuming the following configuration layout:
#
# serve:
#   public:
#     port: 4444
#     something_else: foobar
#
# Key `something_else` can be set as an environment variable by uppercasing it's path:
#   `serve.public.port.somethihng_else` -> `SERVE.PUBLIC.PORT.SOMETHING_ELSE`
# and replacing `.` with `_`:
#   `serve.public.port.somethihng_else` -> `SERVE_PUBLIC_PORT_SOMETHING_ELSE`
#
# Environment variables always override values from the configuration file. Here are some more examples:
#
# Configuration key | Environment variable |
# ------------------|----------------------|
# dsn               | DSN                  |
# serve.admin.host  | SERVE_ADMIN_HOST     |
# ------------------|----------------------|
#
#
# List items such as
#
# secrets:
#   system:
#     - this-is-the-primary-secret
#     - this-is-an-old-secret
#     - this-is-another-old-secret
#
# must be separated using `,` when using environment variables. The environment variable equivalent to the code section#
# above is:
#
# Linux/macOS: $ export SECRETS_SYSTEM=this-is-the-primary-secret,this-is-an-old-secret,this-is-another-old-secret
# Windows: > set SECRETS_SYSTEM=this-is-the-primary-secret,this-is-an-old-secret,this-is-another-old-secret

# log configures the logger
log:
  # Sets the log level, supports "panic", "fatal", "error", "warn", "info" and "debug". Defaults to "info".
  level: info
  # Sets the log format. Leave it undefined for text based log format, or set to "json" for JSON formatting.
  format: json

# Enables profiling if set. Use "cpu" to enable cpu profiling and "mem" to enable memory profiling. For more details
# on profiling, head over to: https://blog.golang.org/profiling-go-programs
profiling: cpu
# profiling: mem

# All authenticators can be configured under this configuration key
authenticators:
  # Configures the anonymous authenticator
  anonymous:
    # Set enabled to true if the authenticator should be enabled and false to disable the authenticator. Defaults to true.
    enabled: true
    # Sets the anonymous username. Defaults to "anonymous". Common names include "guest", "anon", "anonymous", "unknown".
    username: anonymous

  # Configures the jwt authenticator
  jwt:
    # Set enabled to true if the authenticator should be enabled and false to disable the authenticator. Defaults to true.
    enabled: true
    # Sets the strategy to be used to validate/match the scope. Supports "hierarchic", "exact", "wildcard", "none". Defaults
    # to "exact".
    scope_strategy: exact
    # URIs to look up JSON Web Key Sets from for verifying JWT signatures.
    jwks_uris:
      - https://my-website.com/.well-known/jwks.json
      - https://my-other-website.com/.well-known/jwks.json

  # Configures the noop authenticator
  noop:
    # Set enabled to true if the authenticator should be enabled and false to disable the authenticator. Defaults to true.
    enabled: true

  # Configures the oauth2_client_credentials authenticator
  oauth2_client_credentials:


